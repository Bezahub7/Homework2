---
title: "Homework2: Programming in Base R"
format: html
editor: visual
---

# Task 1: Basic Vector practice

1. Create two vectors. One vector corresponding to the pre measurements and one to the post measurements.

```{r}
pre_bp <- c(120, 151, 125, 126, 115, 132, 132, 129, 134, 139, 127, 122, 127, 135, 133, 128, 147, 138, 140, 132)
post_bp <- c(127, 145, 135, 122, 115, 122, 123, 126, 126, 129, 132, 146, 120, 114, 121, 120, 128, 120, 133, 115)
```
2. Assign names to the vector elements using the paste() function. Note that names() can be overwritten
by a character vector.

```{r}

names(pre_bp) <- names(post_bp) <- paste("Patient", 1:20, sep = "_")
names(pre_bp)
```

3. Calculate the change in blood pressure for each patient by subtracting post-treatment measurements
from pre-treatment measurements. Recall that R does math element-wise! Save this calculation as a
new object in R (also a vector).

```{r}
diff_bp <- pre_bp-post_bp
diff_bp
```
4. Calculate the average decrease in blood pressure across all patients. Use the mean() function here!

```{r}
mean(diff_bp)
```

5. Determine which patients experienced a decrease in blood pressure after treatment (a positive change).
Use the which() function to just return the indices (and names) associated with this type of change.

```{r}

bp_decrease <-which(diff_bp>0)
bp_decrease
```
6. Subset the vector of differences to only return those that have a positive change. (Note that you don’t
need the which() function here. A Boolean used as an indexing vector returns only indices were a
TRUE occurred.)

```{r}
diff_bp[diff_bp>0]
```


7. Calculate the average decrease in blood pressure for those where the blood pressure decreased (positive
change).

```{r}
mean(bp_decrease)
```
# Task 2: Basic Data Frame practice

1. Create a data frame object with four columns corresponding to your data above: patient, pre_bp,
post_bp, and diff_bp.

```{r}
treatment <- data.frame(names(pre_bp), pre_bp, post_bp, diff_bp)
treatment
```

2. Return only rows of the data frame where the diff_bp column is negative. (Use [ or learn about the
subset() function if you’d like. If you use [, don’t reference the original vector from the first part,
access the column of the data frame to make your comparison with 0.)

```{r}
neg_df <- treatment[treatment$diff_bp<0,]
neg_df
```
3. Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120 and FALSE
if it is not.

```{r}
treatment$newcol <- treatment$post_bp < 120
treatment$newcol
```
4. Finally, print the data frame out nicely in your final document by modifying the code below appropriately.

```{r}
knitr::kable(treatment)
```


# Task 3: List practice
1. Create a new data frame with this data in it that is similar to the data frame from task 2 (including
the new column of TRUE/FALSE values).

```{r}
placebo <- data.frame(
  names= paste("Patient", 1:10, sep = "_"),
  pre_bp = c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130),
  post_bp = c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124))
  
placebo
```
1.1 Add vectors
     - difference between pre and post placebo use
     - new column to check if post_bp is < 120 
     
```{r}
placebo$diff_bp <- placebo$pre_bp-placebo$post_bp
placebo$newcol <- placebo$post_bp < 120

placebo$diff_bp
placebo$newcol
```


2. Now create and store a list with two elements:
- 1st element named treatment and contains the first data frame you created.
- 2nd element named placebo and contains the second data frame you created.

```{r}
my_list <- list('treatment'=treatment, 'placebo'=placebo)
my_list
```

3. Access the first list element using three different types of syntax (the result can be a list or just the
data frame).
- First syntax

```{r}
my_list[1]
```

- second syntax

```{r}
my_list[[1]]

```
- Third syntax


```{r}
my_list$treatment
```
4. Use your list from question 2. In one line of code, access the pre_bp column of the placebo data
frame.

```{r}
my_list[[2]][2]
```


```{r}
#| echo: false
```

The `echo: false` option disables the printing of code (only output is displayed).
